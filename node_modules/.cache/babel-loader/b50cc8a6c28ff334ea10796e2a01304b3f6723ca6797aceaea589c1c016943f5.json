{"ast":null,"code":"var _jsxFileName = \"/Users/rooteom/Desktop/react_prj_admin/admin-dashboard/src/components/NaverMapComponents.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/NaverMapComponents.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NaverMapSearch = ({\n  onPlaceSelect\n}) => {\n  _s();\n  const [mapUrl, setMapUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleUrlChange = async e => {\n    const newUrl = e.target.value;\n    setMapUrl(newUrl);\n    if (!newUrl) return;\n    setLoading(true);\n    setError(null);\n    try {\n      // 1. 네이버 지도 API를 통해 장소 정보 가져오기\n      const map = new window.naver.maps.Map('temp-map-div', {\n        center: new window.naver.maps.LatLng(37.5666805, 126.9784147),\n        zoom: 15\n      });\n      const urlObj = new URL(newUrl);\n      const searchParams = new URLSearchParams(urlObj.search);\n      let address;\n      let placeId;\n      if (newUrl.includes('naver.me')) {\n        var _redirectUrl$match;\n        // 단축 URL인 경우, 실제 URL로 리다이렉트\n        const response = await fetch(newUrl);\n        const redirectUrl = response.url;\n        placeId = (_redirectUrl$match = redirectUrl.match(/place\\/(\\d+)/)) === null || _redirectUrl$match === void 0 ? void 0 : _redirectUrl$match[1];\n        if (!placeId) {\n          throw new Error('올바른 네이버 지도 URL이 아닙니다');\n        }\n        // 임시로 장소명과 주소를 설정 (실제로는 네이버 지도 API에서 가져와야 함)\n        address = placeId;\n      } else {\n        var _newUrl$match;\n        placeId = (_newUrl$match = newUrl.match(/place\\/(\\d+)/)) === null || _newUrl$match === void 0 ? void 0 : _newUrl$match[1];\n        if (!placeId) {\n          throw new Error('올바른 네이버 지도 URL이 아닙니다');\n        }\n        address = placeId;\n      }\n      if (!address) {\n        throw new Error('주소를 찾을 수 없습니다.');\n      }\n\n      // 2. 네이버 지도 Geocoding으로 좌표 얻기\n      const placeInfo = await new Promise((resolve, reject) => {\n        window.naver.maps.Service.geocode({\n          query: address\n        }, function (status, response) {\n          if (status !== window.naver.maps.Service.Status.OK) {\n            reject(new Error('주소 검색에 실패했습니다.'));\n            return;\n          }\n          const result = response.v2.addresses[0];\n          const name = address.split(' ')[0]; // 가게명 추출\n\n          resolve({\n            name: \"테스트 식당\",\n            // 실제로는 API에서 가져온 이름을 사용\n            address: result.roadAddress || result.jibunAddress,\n            coordinates: {\n              lat: parseFloat(result.y),\n              lng: parseFloat(result.x)\n            }\n          });\n        });\n      });\n\n      // 3. MockAPI에 데이터 저장\n      const mockResponse = await fetch('https://67866aa9f80b78923aa6bee6.mockapi.io/navermapdata', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(placeInfo)\n      });\n      if (!mockResponse.ok) {\n        throw new Error('데이터 저장에 실패했습니다');\n      }\n      const savedData = await mockResponse.json();\n\n      // 4. 상위 컴포넌트에 데이터 전달\n      onPlaceSelect({\n        name: savedData.name,\n        address: savedData.address,\n        coordinates: savedData.coordinates,\n        link: newUrl\n      });\n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message || '장소 정보를 가져오는데 실패했습니다');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: mapUrl,\n        onChange: handleUrlChange,\n        placeholder: \"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 URL\\uC744 \\uBD99\\uC5EC\\uB123\\uC73C\\uC138\\uC694 (\\uCD95\\uC57D URL\\uB3C4 \\uAC00\\uB2A5)\",\n        className: \"search-input\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading-message\",\n        children: \"\\uC7A5\\uC18C \\uC815\\uBCF4\\uB97C \\uAC00\\uC838\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"temp-map-div\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(NaverMapSearch, \"gyd33Em+7HWJYs1z4SxHBrIZgHI=\");\n_c = NaverMapSearch;\nconst RestaurantMap = ({\n  restaurants,\n  height = '400px'\n}) => {\n  _s2();\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n  const infoWindowRef = useRef(null);\n\n  // 숨고 오피스 위치 (테헤란로 133)\n  const DEFAULT_CENTER = {\n    lat: 37.5001,\n    lng: 127.0335\n  };\n  useEffect(() => {\n    const initializeMap = () => {\n      if (!window.naver || !window.naver.maps || !mapRef.current) {\n        setTimeout(initializeMap, 1000);\n        return;\n      }\n\n      // 지도 초기화\n      const map = new window.naver.maps.Map(mapRef.current, {\n        center: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        zoom: 15\n      });\n\n      // 기존 마커와 정보창 제거\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n\n      // 숨고 오피스 마커 추가\n      const officeMarker = new window.naver.maps.Marker({\n        position: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        map: map,\n        icon: {\n          content: '<div style=\"width: 12px; height: 12px; background: #FF4757; border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n          anchor: new window.naver.maps.Point(6, 6)\n        }\n      });\n\n      // 오피스 정보창\n      const officeInfoWindow = new window.naver.maps.InfoWindow({\n        content: `\n          <div style=\"padding: 10px;\">\n            <strong>숨고 오피스</strong>\n            <p style=\"margin: 5px 0 0; font-size: 12px;\">테헤란로 133</p>\n          </div>\n        `,\n        borderWidth: 0,\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n        pixelOffset: new window.naver.maps.Point(0, -10)\n      });\n\n      // 오피스 마커 이벤트\n      window.naver.maps.Event.addListener(officeMarker, 'mouseover', () => {\n        officeInfoWindow.open(map, officeMarker);\n      });\n      window.naver.maps.Event.addListener(officeMarker, 'mouseout', () => {\n        officeInfoWindow.close();\n      });\n\n      // 경계 설정\n      const bounds = new window.naver.maps.LatLngBounds();\n      bounds.extend(new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng));\n\n      // 레스토랑 마커 생성\n      restaurants.forEach(restaurant => {\n        if (!restaurant.coordinates) return;\n        const position = new window.naver.maps.LatLng(restaurant.coordinates.lat, restaurant.coordinates.lng);\n        const marker = new window.naver.maps.Marker({\n          position,\n          map,\n          icon: {\n            content: '<div style=\"width: 10px; height: 10px; background: var(--primary); border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n            anchor: new window.naver.maps.Point(5, 5)\n          }\n        });\n\n        // 마커에 마우스 오버시 표시할 정보창\n        const infoWindow = new window.naver.maps.InfoWindow({\n          content: `\n            <div style=\"padding: 10px;\">\n              <strong>${restaurant.name}</strong>\n              <p style=\"margin: 5px 0 0; font-size: 12px;\">${restaurant.category} · ${restaurant.sharedBy}</p>\n              <p style=\"margin: 5px 0 0; color: #FFB800;\">${'⭐'.repeat(restaurant.rating)}</p>\n            </div>\n          `,\n          borderWidth: 0,\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n          pixelOffset: new window.naver.maps.Point(0, -10)\n        });\n\n        // 마커 이벤트\n        window.naver.maps.Event.addListener(marker, 'mouseover', () => {\n          infoWindow.open(map, marker);\n        });\n        window.naver.maps.Event.addListener(marker, 'mouseout', () => {\n          infoWindow.close();\n        });\n        bounds.extend(position);\n        markersRef.current.push(marker);\n      });\n\n      // 모든 마커가 보이도록 지도 조정\n      if (markersRef.current.length > 0) {\n        map.fitBounds(bounds);\n      }\n    };\n    initializeMap();\n    return () => {\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n    };\n  }, [restaurants]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 10\n  }, this);\n};\n_s2(RestaurantMap, \"YwlieR1fwi6eL0B40rckAgjgPAc=\");\n_c2 = RestaurantMap;\nexport { NaverMapSearch, RestaurantMap };\nvar _c, _c2;\n$RefreshReg$(_c, \"NaverMapSearch\");\n$RefreshReg$(_c2, \"RestaurantMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","NaverMapSearch","onPlaceSelect","_s","mapUrl","setMapUrl","loading","setLoading","error","setError","handleUrlChange","e","newUrl","target","value","map","window","naver","maps","Map","center","LatLng","zoom","urlObj","URL","searchParams","URLSearchParams","search","address","placeId","includes","_redirectUrl$match","response","fetch","redirectUrl","url","match","Error","_newUrl$match","placeInfo","Promise","resolve","reject","Service","geocode","query","status","Status","OK","result","v2","addresses","name","split","roadAddress","jibunAddress","coordinates","lat","parseFloat","y","lng","x","mockResponse","method","headers","body","JSON","stringify","ok","savedData","json","link","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","disabled","id","style","display","_c","RestaurantMap","restaurants","height","_s2","mapRef","markersRef","infoWindowRef","DEFAULT_CENTER","initializeMap","current","setTimeout","forEach","marker","setMap","officeMarker","Marker","position","icon","content","anchor","Point","officeInfoWindow","InfoWindow","borderWidth","backgroundColor","borderRadius","boxShadow","pixelOffset","Event","addListener","open","close","bounds","LatLngBounds","extend","restaurant","infoWindow","category","sharedBy","repeat","rating","push","length","fitBounds","ref","width","_c2","$RefreshReg$"],"sources":["/Users/rooteom/Desktop/react_prj_admin/admin-dashboard/src/components/NaverMapComponents.js"],"sourcesContent":["// src/components/NaverMapComponents.js\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst NaverMapSearch = ({ onPlaceSelect }) => {\n  const [mapUrl, setMapUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleUrlChange = async (e) => {\n    const newUrl = e.target.value;\n    setMapUrl(newUrl);\n    \n    if (!newUrl) return;\n\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 1. 네이버 지도 API를 통해 장소 정보 가져오기\n      const map = new window.naver.maps.Map('temp-map-div', {\n        center: new window.naver.maps.LatLng(37.5666805, 126.9784147),\n        zoom: 15,\n      });\n\n      const urlObj = new URL(newUrl);\n      const searchParams = new URLSearchParams(urlObj.search);\n      let address;\n      let placeId;\n      \n      if (newUrl.includes('naver.me')) {\n        // 단축 URL인 경우, 실제 URL로 리다이렉트\n        const response = await fetch(newUrl);\n        const redirectUrl = response.url;\n        placeId = redirectUrl.match(/place\\/(\\d+)/)?.[1];\n        if (!placeId) {\n          throw new Error('올바른 네이버 지도 URL이 아닙니다');\n        }\n        // 임시로 장소명과 주소를 설정 (실제로는 네이버 지도 API에서 가져와야 함)\n        address = placeId;\n      } else {\n        placeId = newUrl.match(/place\\/(\\d+)/)?.[1];\n        if (!placeId) {\n          throw new Error('올바른 네이버 지도 URL이 아닙니다');\n        }\n        address = placeId;\n      }\n\n      if (!address) {\n        throw new Error('주소를 찾을 수 없습니다.');\n      }\n\n      // 2. 네이버 지도 Geocoding으로 좌표 얻기\n      const placeInfo = await new Promise((resolve, reject) => {\n        window.naver.maps.Service.geocode({\n          query: address\n        }, function(status, response) {\n          if (status !== window.naver.maps.Service.Status.OK) {\n            reject(new Error('주소 검색에 실패했습니다.'));\n            return;\n          }\n\n          const result = response.v2.addresses[0];\n          const name = address.split(' ')[0]; // 가게명 추출\n\n          resolve({\n            name: \"테스트 식당\", // 실제로는 API에서 가져온 이름을 사용\n            address: result.roadAddress || result.jibunAddress,\n            coordinates: {\n              lat: parseFloat(result.y),\n              lng: parseFloat(result.x)\n            }\n          });\n        });\n      });\n\n      // 3. MockAPI에 데이터 저장\n      const mockResponse = await fetch('https://67866aa9f80b78923aa6bee6.mockapi.io/navermapdata', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(placeInfo)\n      });\n\n      if (!mockResponse.ok) {\n        throw new Error('데이터 저장에 실패했습니다');\n      }\n\n      const savedData = await mockResponse.json();\n      \n      // 4. 상위 컴포넌트에 데이터 전달\n      onPlaceSelect({\n        name: savedData.name,\n        address: savedData.address,\n        coordinates: savedData.coordinates,\n        link: newUrl\n      });\n\n    } catch (err) {\n      console.error('Error:', err);\n      setError(err.message || '장소 정보를 가져오는데 실패했습니다');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"map-search\">\n      <div className=\"form-field\">\n        <label>네이버 지도 URL</label>\n        <input\n          type=\"text\"\n          value={mapUrl}\n          onChange={handleUrlChange}\n          placeholder=\"네이버 지도 URL을 붙여넣으세요 (축약 URL도 가능)\"\n          className=\"search-input\"\n          disabled={loading}\n        />\n        {loading && <p className=\"loading-message\">장소 정보를 가져오는 중...</p>}\n        {error && <p className=\"error-message\">{error}</p>}\n      </div>\n      {/* 임시 지도 div - 화면에 보이지 않음 */}\n      <div id=\"temp-map-div\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nconst RestaurantMap = ({ restaurants, height = '400px' }) => {\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n  const infoWindowRef = useRef(null);\n\n  // 숨고 오피스 위치 (테헤란로 133)\n  const DEFAULT_CENTER = {\n    lat: 37.5001,\n    lng: 127.0335\n  };\n\n  useEffect(() => {\n    const initializeMap = () => {\n      if (!window.naver || !window.naver.maps || !mapRef.current) {\n        setTimeout(initializeMap, 1000);\n        return;\n      }\n\n      // 지도 초기화\n      const map = new window.naver.maps.Map(mapRef.current, {\n        center: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        zoom: 15\n      });\n\n      // 기존 마커와 정보창 제거\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n\n      // 숨고 오피스 마커 추가\n      const officeMarker = new window.naver.maps.Marker({\n        position: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        map: map,\n        icon: {\n          content: '<div style=\"width: 12px; height: 12px; background: #FF4757; border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n          anchor: new window.naver.maps.Point(6, 6)\n        }\n      });\n\n      // 오피스 정보창\n      const officeInfoWindow = new window.naver.maps.InfoWindow({\n        content: `\n          <div style=\"padding: 10px;\">\n            <strong>숨고 오피스</strong>\n            <p style=\"margin: 5px 0 0; font-size: 12px;\">테헤란로 133</p>\n          </div>\n        `,\n        borderWidth: 0,\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n        pixelOffset: new window.naver.maps.Point(0, -10)\n      });\n\n      // 오피스 마커 이벤트\n      window.naver.maps.Event.addListener(officeMarker, 'mouseover', () => {\n        officeInfoWindow.open(map, officeMarker);\n      });\n      window.naver.maps.Event.addListener(officeMarker, 'mouseout', () => {\n        officeInfoWindow.close();\n      });\n\n      // 경계 설정\n      const bounds = new window.naver.maps.LatLngBounds();\n      bounds.extend(new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng));\n\n      // 레스토랑 마커 생성\n      restaurants.forEach(restaurant => {\n        if (!restaurant.coordinates) return;\n        \n        const position = new window.naver.maps.LatLng(\n          restaurant.coordinates.lat,\n          restaurant.coordinates.lng\n        );\n\n        const marker = new window.naver.maps.Marker({\n          position,\n          map,\n          icon: {\n            content: '<div style=\"width: 10px; height: 10px; background: var(--primary); border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n            anchor: new window.naver.maps.Point(5, 5)\n          }\n        });\n\n        // 마커에 마우스 오버시 표시할 정보창\n        const infoWindow = new window.naver.maps.InfoWindow({\n          content: `\n            <div style=\"padding: 10px;\">\n              <strong>${restaurant.name}</strong>\n              <p style=\"margin: 5px 0 0; font-size: 12px;\">${restaurant.category} · ${restaurant.sharedBy}</p>\n              <p style=\"margin: 5px 0 0; color: #FFB800;\">${'⭐'.repeat(restaurant.rating)}</p>\n            </div>\n          `,\n          borderWidth: 0,\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n          pixelOffset: new window.naver.maps.Point(0, -10)\n        });\n\n        // 마커 이벤트\n        window.naver.maps.Event.addListener(marker, 'mouseover', () => {\n          infoWindow.open(map, marker);\n        });\n        window.naver.maps.Event.addListener(marker, 'mouseout', () => {\n          infoWindow.close();\n        });\n\n        bounds.extend(position);\n        markersRef.current.push(marker);\n      });\n\n      // 모든 마커가 보이도록 지도 조정\n      if (markersRef.current.length > 0) {\n        map.fitBounds(bounds);\n      }\n    };\n\n    initializeMap();\n\n    return () => {\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n    };\n  }, [restaurants]);\n\n  return <div ref={mapRef} style={{ width: '100%', height }} />;\n};\n\nexport { NaverMapSearch, RestaurantMap };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}