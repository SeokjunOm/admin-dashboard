{"ast":null,"code":"var _jsxFileName = \"/Users/rooteom/Desktop/react_prj_admin/admin-dashboard/src/components/NaverMapComponents.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/NaverMapComponents.js\nimport React, { useState, useEffect, useRef } from 'react';\n\n// 네이버 지도 URL에서 장소 ID를 추출하는 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NaverMapSearch = ({\n  onPlaceSelect\n}) => {\n  _s();\n  const [mapUrl, setMapUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const extractPlaceId = async url => {\n    try {\n      // 축약 URL인 경우 (naver.me)\n      if (url.includes('naver.me')) {\n        try {\n          const response = await fetch(url);\n          const fullUrl = response.url;\n          return extractPlaceIdFromFullUrl(fullUrl);\n        } catch (error) {\n          // 축약 URL에서 직접 ID 추출 시도\n          const id = url.split('/').pop();\n          if (id && id.length > 0) {\n            return id;\n          }\n          console.error('축약 URL 처리 중 에러:', error);\n        }\n      }\n      return extractPlaceIdFromFullUrl(url);\n    } catch (err) {\n      throw new Error('URL 처리 중 오류가 발생했습니다.');\n    }\n  };\n  const extractPlaceIdFromFullUrl = url => {\n    const patterns = [/place(?:%2F|\\/)([\\d]+)/, /entry\\/place\\/([\\d]+)/, /restaurant\\/([\\d]+)/, /location\\/([\\d]+)/, /(\\d+)$/];\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // URL 입력값이 변경될 때마다 실행되는 함수\n  const handleUrlChange = async e => {\n    const newUrl = e.target.value;\n    setMapUrl(newUrl);\n    if (newUrl) {\n      setLoading(true);\n      setError(null);\n      try {\n        const placeId = await extractPlaceId(newUrl);\n        if (!placeId) {\n          setError('올바른 네이버 지도 URL이 아닙니다');\n          return;\n        }\n\n        // 테스트용 임시 데이터 (실제로는 네이버 API에서 가져와야 함)\n        const placeInfo = {\n          name: \"테스트 식당\",\n          address: \"서울시 강남구 테헤란로 133\",\n          coordinates: {\n            lat: 37.4987,\n            lng: 127.0297\n          }\n        };\n\n        // Mock API에 데이터 저장\n        const response = await fetch('https://67866aa9f80b78923aa6bee6.mockapi.io/navermapdata', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: placeInfo.name,\n            address: placeInfo.address,\n            coordinates: placeInfo.coordinates\n          })\n        });\n        if (!response.ok) throw new Error('데이터 저장에 실패했습니다');\n        const savedData = await response.json();\n        onPlaceSelect({\n          name: savedData.name,\n          address: savedData.address,\n          coordinates: savedData.coordinates,\n          link: newUrl\n        });\n      } catch (err) {\n        console.error('API 호출 에러:', err);\n        setError('장소 정보를 가져오는데 실패했습니다');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-search\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: mapUrl,\n        onChange: handleUrlChange,\n        placeholder: \"\\uB124\\uC774\\uBC84 \\uC9C0\\uB3C4 URL\\uC744 \\uBD99\\uC5EC\\uB123\\uC73C\\uC138\\uC694 (\\uCD95\\uC57D URL\\uB3C4 \\uAC00\\uB2A5)\",\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n// 지도에 마커를 표시하는 컴포넌트\n_s(NaverMapSearch, \"gyd33Em+7HWJYs1z4SxHBrIZgHI=\");\n_c = NaverMapSearch;\nconst RestaurantMap = ({\n  restaurants,\n  height = '400px'\n}) => {\n  _s2();\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n  const infoWindowRef = useRef(null);\n\n  // 숨고 오피스 위치 (테헤란로 133)\n  const DEFAULT_CENTER = {\n    lat: 37.5001,\n    lng: 127.0335\n  };\n  useEffect(() => {\n    const initializeMap = () => {\n      if (!window.naver || !window.naver.maps || !mapRef.current) {\n        setTimeout(initializeMap, 1000);\n        return;\n      }\n\n      // 지도 초기화\n      const map = new window.naver.maps.Map(mapRef.current, {\n        center: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        zoom: 15\n      });\n\n      // 기존 마커와 정보창 제거\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n\n      // 숨고 오피스 마커 추가\n      const officeMarker = new window.naver.maps.Marker({\n        position: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        map: map,\n        icon: {\n          content: '<div style=\"width: 12px; height: 12px; background: #FF4757; border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n          anchor: new window.naver.maps.Point(6, 6)\n        }\n      });\n\n      // 오피스 정보창\n      const officeInfoWindow = new window.naver.maps.InfoWindow({\n        content: `\n          <div style=\"padding: 10px;\">\n            <strong>숨고 오피스</strong>\n            <p style=\"margin: 5px 0 0; font-size: 12px;\">테헤란로 133</p>\n          </div>\n        `,\n        borderWidth: 0,\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n        pixelOffset: new window.naver.maps.Point(0, -10)\n      });\n\n      // 오피스 마커 이벤트\n      window.naver.maps.Event.addListener(officeMarker, 'mouseover', () => {\n        officeInfoWindow.open(map, officeMarker);\n      });\n      window.naver.maps.Event.addListener(officeMarker, 'mouseout', () => {\n        officeInfoWindow.close();\n      });\n\n      // 경계 설정\n      const bounds = new window.naver.maps.LatLngBounds();\n      bounds.extend(new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng));\n\n      // 레스토랑 마커 생성\n      restaurants.forEach(restaurant => {\n        if (!restaurant.coordinates) return;\n        const position = new window.naver.maps.LatLng(restaurant.coordinates.lat, restaurant.coordinates.lng);\n        const marker = new window.naver.maps.Marker({\n          position,\n          map,\n          icon: {\n            content: '<div style=\"width: 10px; height: 10px; background: var(--primary); border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n            anchor: new window.naver.maps.Point(5, 5)\n          }\n        });\n\n        // 마커에 마우스 오버시 표시할 정보창\n        const infoWindow = new window.naver.maps.InfoWindow({\n          content: `\n            <div style=\"padding: 10px;\">\n              <strong>${restaurant.name}</strong>\n              <p style=\"margin: 5px 0 0; font-size: 12px;\">${restaurant.category} · ${restaurant.sharedBy}</p>\n              <p style=\"margin: 5px 0 0; color: #FFB800;\">${'⭐'.repeat(restaurant.rating)}</p>\n            </div>\n          `,\n          borderWidth: 0,\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n          pixelOffset: new window.naver.maps.Point(0, -10)\n        });\n\n        // 마커 이벤트\n        window.naver.maps.Event.addListener(marker, 'mouseover', () => {\n          infoWindow.open(map, marker);\n        });\n        window.naver.maps.Event.addListener(marker, 'mouseout', () => {\n          infoWindow.close();\n        });\n        bounds.extend(position);\n        markersRef.current.push(marker);\n      });\n\n      // 모든 마커가 보이도록 지도 조정\n      if (markersRef.current.length > 0) {\n        map.fitBounds(bounds);\n      }\n    };\n    initializeMap();\n    return () => {\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n    };\n  }, [restaurants]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 10\n  }, this);\n};\n_s2(RestaurantMap, \"YwlieR1fwi6eL0B40rckAgjgPAc=\");\n_c2 = RestaurantMap;\nexport { NaverMapSearch, RestaurantMap };\nvar _c, _c2;\n$RefreshReg$(_c, \"NaverMapSearch\");\n$RefreshReg$(_c2, \"RestaurantMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","NaverMapSearch","onPlaceSelect","_s","mapUrl","setMapUrl","loading","setLoading","error","setError","extractPlaceId","url","includes","response","fetch","fullUrl","extractPlaceIdFromFullUrl","id","split","pop","length","console","err","Error","patterns","pattern","match","handleUrlChange","e","newUrl","target","value","placeId","placeInfo","name","address","coordinates","lat","lng","method","headers","body","JSON","stringify","ok","savedData","json","link","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","_c","RestaurantMap","restaurants","height","_s2","mapRef","markersRef","infoWindowRef","DEFAULT_CENTER","initializeMap","window","naver","maps","current","setTimeout","map","Map","center","LatLng","zoom","forEach","marker","setMap","officeMarker","Marker","position","icon","content","anchor","Point","officeInfoWindow","InfoWindow","borderWidth","backgroundColor","borderRadius","boxShadow","pixelOffset","Event","addListener","open","close","bounds","LatLngBounds","extend","restaurant","infoWindow","category","sharedBy","repeat","rating","push","fitBounds","ref","style","width","_c2","$RefreshReg$"],"sources":["/Users/rooteom/Desktop/react_prj_admin/admin-dashboard/src/components/NaverMapComponents.js"],"sourcesContent":["// src/components/NaverMapComponents.js\nimport React, { useState, useEffect, useRef } from 'react';\n\n// 네이버 지도 URL에서 장소 ID를 추출하는 컴포넌트\nconst NaverMapSearch = ({ onPlaceSelect }) => {\n  const [mapUrl, setMapUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const extractPlaceId = async (url) => {\n    try {\n      // 축약 URL인 경우 (naver.me)\n      if (url.includes('naver.me')) {\n        try {\n          const response = await fetch(url);\n          const fullUrl = response.url;\n          return extractPlaceIdFromFullUrl(fullUrl);\n        } catch (error) {\n          // 축약 URL에서 직접 ID 추출 시도\n          const id = url.split('/').pop();\n          if (id && id.length > 0) {\n            return id;\n          }\n          console.error('축약 URL 처리 중 에러:', error);\n        }\n      }\n      \n      return extractPlaceIdFromFullUrl(url);\n    } catch (err) {\n      throw new Error('URL 처리 중 오류가 발생했습니다.');\n    }\n  };\n\n  const extractPlaceIdFromFullUrl = (url) => {\n    const patterns = [\n      /place(?:%2F|\\/)([\\d]+)/,\n      /entry\\/place\\/([\\d]+)/,\n      /restaurant\\/([\\d]+)/,\n      /location\\/([\\d]+)/,\n      /(\\d+)$/\n    ];\n\n    for (const pattern of patterns) {\n      const match = url.match(pattern);\n      if (match) return match[1];\n    }\n    return null;\n  };\n\n  // URL 입력값이 변경될 때마다 실행되는 함수\n  const handleUrlChange = async (e) => {\n    const newUrl = e.target.value;\n    setMapUrl(newUrl);\n    \n    if (newUrl) {\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const placeId = await extractPlaceId(newUrl);\n        if (!placeId) {\n          setError('올바른 네이버 지도 URL이 아닙니다');\n          return;\n        }\n  \n        // 테스트용 임시 데이터 (실제로는 네이버 API에서 가져와야 함)\n        const placeInfo = {\n          name: \"테스트 식당\",\n          address: \"서울시 강남구 테헤란로 133\",\n          coordinates: {\n            lat: 37.4987,\n            lng: 127.0297\n          }\n        };\n  \n        // Mock API에 데이터 저장\n        const response = await fetch('https://67866aa9f80b78923aa6bee6.mockapi.io/navermapdata', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            name: placeInfo.name,\n            address: placeInfo.address,\n            coordinates: placeInfo.coordinates\n          })\n        });\n  \n        if (!response.ok) throw new Error('데이터 저장에 실패했습니다');\n        const savedData = await response.json();\n        \n        onPlaceSelect({\n          name: savedData.name,\n          address: savedData.address,\n          coordinates: savedData.coordinates,\n          link: newUrl\n        });\n  \n      } catch (err) {\n        console.error('API 호출 에러:', err);\n        setError('장소 정보를 가져오는데 실패했습니다');\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"map-search\">\n      <div className=\"form-field\">\n        <label>네이버 지도 URL</label>\n        <input\n          type=\"text\"\n          value={mapUrl}\n          onChange={handleUrlChange}\n          placeholder=\"네이버 지도 URL을 붙여넣으세요 (축약 URL도 가능)\"\n          className=\"search-input\"\n        />\n        {error && <p className=\"error-message\">{error}</p>}\n      </div>\n    </div>\n  );\n};\n\n// 지도에 마커를 표시하는 컴포넌트\nconst RestaurantMap = ({ restaurants, height = '400px' }) => {\n  const mapRef = useRef(null);\n  const markersRef = useRef([]);\n  const infoWindowRef = useRef(null);\n\n  // 숨고 오피스 위치 (테헤란로 133)\n  const DEFAULT_CENTER = {\n    lat: 37.5001,\n    lng: 127.0335\n  };\n\n  useEffect(() => {\n    const initializeMap = () => {\n      if (!window.naver || !window.naver.maps || !mapRef.current) {\n        setTimeout(initializeMap, 1000);\n        return;\n      }\n\n      // 지도 초기화\n      const map = new window.naver.maps.Map(mapRef.current, {\n        center: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        zoom: 15\n      });\n\n      // 기존 마커와 정보창 제거\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n\n      // 숨고 오피스 마커 추가\n      const officeMarker = new window.naver.maps.Marker({\n        position: new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng),\n        map: map,\n        icon: {\n          content: '<div style=\"width: 12px; height: 12px; background: #FF4757; border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n          anchor: new window.naver.maps.Point(6, 6)\n        }\n      });\n\n      // 오피스 정보창\n      const officeInfoWindow = new window.naver.maps.InfoWindow({\n        content: `\n          <div style=\"padding: 10px;\">\n            <strong>숨고 오피스</strong>\n            <p style=\"margin: 5px 0 0; font-size: 12px;\">테헤란로 133</p>\n          </div>\n        `,\n        borderWidth: 0,\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n        pixelOffset: new window.naver.maps.Point(0, -10)\n      });\n\n      // 오피스 마커 이벤트\n      window.naver.maps.Event.addListener(officeMarker, 'mouseover', () => {\n        officeInfoWindow.open(map, officeMarker);\n      });\n      window.naver.maps.Event.addListener(officeMarker, 'mouseout', () => {\n        officeInfoWindow.close();\n      });\n\n      // 경계 설정\n      const bounds = new window.naver.maps.LatLngBounds();\n      bounds.extend(new window.naver.maps.LatLng(DEFAULT_CENTER.lat, DEFAULT_CENTER.lng));\n\n      // 레스토랑 마커 생성\n      restaurants.forEach(restaurant => {\n        if (!restaurant.coordinates) return;\n        \n        const position = new window.naver.maps.LatLng(\n          restaurant.coordinates.lat,\n          restaurant.coordinates.lng\n        );\n\n        const marker = new window.naver.maps.Marker({\n          position,\n          map,\n          icon: {\n            content: '<div style=\"width: 10px; height: 10px; background: var(--primary); border-radius: 50%; border: 2px solid #FFF; box-shadow: 0 2px 6px rgba(0,0,0,0.3);\"></div>',\n            anchor: new window.naver.maps.Point(5, 5)\n          }\n        });\n\n        // 마커에 마우스 오버시 표시할 정보창\n        const infoWindow = new window.naver.maps.InfoWindow({\n          content: `\n            <div style=\"padding: 10px;\">\n              <strong>${restaurant.name}</strong>\n              <p style=\"margin: 5px 0 0; font-size: 12px;\">${restaurant.category} · ${restaurant.sharedBy}</p>\n              <p style=\"margin: 5px 0 0; color: #FFB800;\">${'⭐'.repeat(restaurant.rating)}</p>\n            </div>\n          `,\n          borderWidth: 0,\n          backgroundColor: 'white',\n          borderRadius: '8px',\n          boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n          pixelOffset: new window.naver.maps.Point(0, -10)\n        });\n\n        // 마커 이벤트\n        window.naver.maps.Event.addListener(marker, 'mouseover', () => {\n          infoWindow.open(map, marker);\n        });\n        window.naver.maps.Event.addListener(marker, 'mouseout', () => {\n          infoWindow.close();\n        });\n\n        bounds.extend(position);\n        markersRef.current.push(marker);\n      });\n\n      // 모든 마커가 보이도록 지도 조정\n      if (markersRef.current.length > 0) {\n        map.fitBounds(bounds);\n      }\n    };\n\n    initializeMap();\n\n    return () => {\n      markersRef.current.forEach(marker => marker.setMap(null));\n      markersRef.current = [];\n      if (infoWindowRef.current) {\n        infoWindowRef.current.setMap(null);\n      }\n    };\n  }, [restaurants]);\n\n  return <div ref={mapRef} style={{ width: '100%', height }} />;\n};\n\nexport { NaverMapSearch, RestaurantMap };"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMc,cAAc,GAAG,MAAOC,GAAG,IAAK;IACpC,IAAI;MACF;MACA,IAAIA,GAAG,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC5B,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;UACjC,MAAMI,OAAO,GAAGF,QAAQ,CAACF,GAAG;UAC5B,OAAOK,yBAAyB,CAACD,OAAO,CAAC;QAC3C,CAAC,CAAC,OAAOP,KAAK,EAAE;UACd;UACA,MAAMS,EAAE,GAAGN,GAAG,CAACO,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;UAC/B,IAAIF,EAAE,IAAIA,EAAE,CAACG,MAAM,GAAG,CAAC,EAAE;YACvB,OAAOH,EAAE;UACX;UACAI,OAAO,CAACb,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;QACzC;MACF;MAEA,OAAOQ,yBAAyB,CAACL,GAAG,CAAC;IACvC,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;EACF,CAAC;EAED,MAAMP,yBAAyB,GAAIL,GAAG,IAAK;IACzC,MAAMa,QAAQ,GAAG,CACf,wBAAwB,EACxB,uBAAuB,EACvB,qBAAqB,EACrB,mBAAmB,EACnB,QAAQ,CACT;IAED,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;MAC9B,MAAME,KAAK,GAAGf,GAAG,CAACe,KAAK,CAACD,OAAO,CAAC;MAChC,IAAIC,KAAK,EAAE,OAAOA,KAAK,CAAC,CAAC,CAAC;IAC5B;IACA,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG,MAAOC,CAAC,IAAK;IACnC,MAAMC,MAAM,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC7B1B,SAAS,CAACwB,MAAM,CAAC;IAEjB,IAAIA,MAAM,EAAE;MACVtB,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMuB,OAAO,GAAG,MAAMtB,cAAc,CAACmB,MAAM,CAAC;QAC5C,IAAI,CAACG,OAAO,EAAE;UACZvB,QAAQ,CAAC,sBAAsB,CAAC;UAChC;QACF;;QAEA;QACA,MAAMwB,SAAS,GAAG;UAChBC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE,kBAAkB;UAC3BC,WAAW,EAAE;YACXC,GAAG,EAAE,OAAO;YACZC,GAAG,EAAE;UACP;QACF,CAAC;;QAED;QACA,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0D,EAAE;UACvFyB,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBT,IAAI,EAAED,SAAS,CAACC,IAAI;YACpBC,OAAO,EAAEF,SAAS,CAACE,OAAO;YAC1BC,WAAW,EAAEH,SAAS,CAACG;UACzB,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAACvB,QAAQ,CAAC+B,EAAE,EAAE,MAAM,IAAIrB,KAAK,CAAC,gBAAgB,CAAC;QACnD,MAAMsB,SAAS,GAAG,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAEvC5C,aAAa,CAAC;UACZgC,IAAI,EAAEW,SAAS,CAACX,IAAI;UACpBC,OAAO,EAAEU,SAAS,CAACV,OAAO;UAC1BC,WAAW,EAAES,SAAS,CAACT,WAAW;UAClCW,IAAI,EAAElB;QACR,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOP,GAAG,EAAE;QACZD,OAAO,CAACb,KAAK,CAAC,YAAY,EAAEc,GAAG,CAAC;QAChCb,QAAQ,CAAC,qBAAqB,CAAC;MACjC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;EAED,oBACEP,OAAA;IAAKgD,SAAS,EAAC,YAAY;IAAAC,QAAA,eACzBjD,OAAA;MAAKgD,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBjD,OAAA;QAAAiD,QAAA,EAAO;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBrD,OAAA;QACEsD,IAAI,EAAC,MAAM;QACXvB,KAAK,EAAE3B,MAAO;QACdmD,QAAQ,EAAE5B,eAAgB;QAC1B6B,WAAW,EAAC,sHAAiC;QAC7CR,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,EACD7C,KAAK,iBAAIR,OAAA;QAAGgD,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAEzC;MAAK;QAAA0C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AAAAlD,EAAA,CAtHMF,cAAc;AAAAwD,EAAA,GAAdxD,cAAc;AAuHpB,MAAMyD,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC,MAAM,GAAG;AAAQ,CAAC,KAAK;EAAAC,GAAA;EAC3D,MAAMC,MAAM,GAAGhE,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMiE,UAAU,GAAGjE,MAAM,CAAC,EAAE,CAAC;EAC7B,MAAMkE,aAAa,GAAGlE,MAAM,CAAC,IAAI,CAAC;;EAElC;EACA,MAAMmE,cAAc,GAAG;IACrB5B,GAAG,EAAE,OAAO;IACZC,GAAG,EAAE;EACP,CAAC;EAEDzC,SAAS,CAAC,MAAM;IACd,MAAMqE,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI,CAACD,MAAM,CAACC,KAAK,CAACC,IAAI,IAAI,CAACP,MAAM,CAACQ,OAAO,EAAE;QAC1DC,UAAU,CAACL,aAAa,EAAE,IAAI,CAAC;QAC/B;MACF;;MAEA;MACA,MAAMM,GAAG,GAAG,IAAIL,MAAM,CAACC,KAAK,CAACC,IAAI,CAACI,GAAG,CAACX,MAAM,CAACQ,OAAO,EAAE;QACpDI,MAAM,EAAE,IAAIP,MAAM,CAACC,KAAK,CAACC,IAAI,CAACM,MAAM,CAACV,cAAc,CAAC5B,GAAG,EAAE4B,cAAc,CAAC3B,GAAG,CAAC;QAC5EsC,IAAI,EAAE;MACR,CAAC,CAAC;;MAEF;MACAb,UAAU,CAACO,OAAO,CAACO,OAAO,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;MACzDhB,UAAU,CAACO,OAAO,GAAG,EAAE;MACvB,IAAIN,aAAa,CAACM,OAAO,EAAE;QACzBN,aAAa,CAACM,OAAO,CAACS,MAAM,CAAC,IAAI,CAAC;MACpC;;MAEA;MACA,MAAMC,YAAY,GAAG,IAAIb,MAAM,CAACC,KAAK,CAACC,IAAI,CAACY,MAAM,CAAC;QAChDC,QAAQ,EAAE,IAAIf,MAAM,CAACC,KAAK,CAACC,IAAI,CAACM,MAAM,CAACV,cAAc,CAAC5B,GAAG,EAAE4B,cAAc,CAAC3B,GAAG,CAAC;QAC9EkC,GAAG,EAAEA,GAAG;QACRW,IAAI,EAAE;UACJC,OAAO,EAAE,wJAAwJ;UACjKC,MAAM,EAAE,IAAIlB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC;QAC1C;MACF,CAAC,CAAC;;MAEF;MACA,MAAMC,gBAAgB,GAAG,IAAIpB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACmB,UAAU,CAAC;QACxDJ,OAAO,EAAE;AACjB;AACA;AACA;AACA;AACA,SAAS;QACDK,WAAW,EAAE,CAAC;QACdC,eAAe,EAAE,OAAO;QACxBC,YAAY,EAAE,KAAK;QACnBC,SAAS,EAAE,2BAA2B;QACtCC,WAAW,EAAE,IAAI1B,MAAM,CAACC,KAAK,CAACC,IAAI,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;MACjD,CAAC,CAAC;;MAEF;MACAnB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACyB,KAAK,CAACC,WAAW,CAACf,YAAY,EAAE,WAAW,EAAE,MAAM;QACnEO,gBAAgB,CAACS,IAAI,CAACxB,GAAG,EAAEQ,YAAY,CAAC;MAC1C,CAAC,CAAC;MACFb,MAAM,CAACC,KAAK,CAACC,IAAI,CAACyB,KAAK,CAACC,WAAW,CAACf,YAAY,EAAE,UAAU,EAAE,MAAM;QAClEO,gBAAgB,CAACU,KAAK,CAAC,CAAC;MAC1B,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAG,IAAI/B,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC8B,YAAY,CAAC,CAAC;MACnDD,MAAM,CAACE,MAAM,CAAC,IAAIjC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACM,MAAM,CAACV,cAAc,CAAC5B,GAAG,EAAE4B,cAAc,CAAC3B,GAAG,CAAC,CAAC;;MAEnF;MACAqB,WAAW,CAACkB,OAAO,CAACwB,UAAU,IAAI;QAChC,IAAI,CAACA,UAAU,CAACjE,WAAW,EAAE;QAE7B,MAAM8C,QAAQ,GAAG,IAAIf,MAAM,CAACC,KAAK,CAACC,IAAI,CAACM,MAAM,CAC3C0B,UAAU,CAACjE,WAAW,CAACC,GAAG,EAC1BgE,UAAU,CAACjE,WAAW,CAACE,GACzB,CAAC;QAED,MAAMwC,MAAM,GAAG,IAAIX,MAAM,CAACC,KAAK,CAACC,IAAI,CAACY,MAAM,CAAC;UAC1CC,QAAQ;UACRV,GAAG;UACHW,IAAI,EAAE;YACJC,OAAO,EAAE,+JAA+J;YACxKC,MAAM,EAAE,IAAIlB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC;UAC1C;QACF,CAAC,CAAC;;QAEF;QACA,MAAMgB,UAAU,GAAG,IAAInC,MAAM,CAACC,KAAK,CAACC,IAAI,CAACmB,UAAU,CAAC;UAClDJ,OAAO,EAAE;AACnB;AACA,wBAAwBiB,UAAU,CAACnE,IAAI;AACvC,6DAA6DmE,UAAU,CAACE,QAAQ,MAAMF,UAAU,CAACG,QAAQ;AACzG,4DAA4D,GAAG,CAACC,MAAM,CAACJ,UAAU,CAACK,MAAM,CAAC;AACzF;AACA,WAAW;UACDjB,WAAW,EAAE,CAAC;UACdC,eAAe,EAAE,OAAO;UACxBC,YAAY,EAAE,KAAK;UACnBC,SAAS,EAAE,2BAA2B;UACtCC,WAAW,EAAE,IAAI1B,MAAM,CAACC,KAAK,CAACC,IAAI,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;QACjD,CAAC,CAAC;;QAEF;QACAnB,MAAM,CAACC,KAAK,CAACC,IAAI,CAACyB,KAAK,CAACC,WAAW,CAACjB,MAAM,EAAE,WAAW,EAAE,MAAM;UAC7DwB,UAAU,CAACN,IAAI,CAACxB,GAAG,EAAEM,MAAM,CAAC;QAC9B,CAAC,CAAC;QACFX,MAAM,CAACC,KAAK,CAACC,IAAI,CAACyB,KAAK,CAACC,WAAW,CAACjB,MAAM,EAAE,UAAU,EAAE,MAAM;UAC5DwB,UAAU,CAACL,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC;QAEFC,MAAM,CAACE,MAAM,CAAClB,QAAQ,CAAC;QACvBnB,UAAU,CAACO,OAAO,CAACqC,IAAI,CAAC7B,MAAM,CAAC;MACjC,CAAC,CAAC;;MAEF;MACA,IAAIf,UAAU,CAACO,OAAO,CAAClD,MAAM,GAAG,CAAC,EAAE;QACjCoD,GAAG,CAACoC,SAAS,CAACV,MAAM,CAAC;MACvB;IACF,CAAC;IAEDhC,aAAa,CAAC,CAAC;IAEf,OAAO,MAAM;MACXH,UAAU,CAACO,OAAO,CAACO,OAAO,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;MACzDhB,UAAU,CAACO,OAAO,GAAG,EAAE;MACvB,IAAIN,aAAa,CAACM,OAAO,EAAE;QACzBN,aAAa,CAACM,OAAO,CAACS,MAAM,CAAC,IAAI,CAAC;MACpC;IACF,CAAC;EACH,CAAC,EAAE,CAACpB,WAAW,CAAC,CAAC;EAEjB,oBAAO3D,OAAA;IAAK6G,GAAG,EAAE/C,MAAO;IAACgD,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEnD;IAAO;EAAE;IAAAV,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC/D,CAAC;AAACQ,GAAA,CApIIH,aAAa;AAAAsD,GAAA,GAAbtD,aAAa;AAsInB,SAASzD,cAAc,EAAEyD,aAAa;AAAG,IAAAD,EAAA,EAAAuD,GAAA;AAAAC,YAAA,CAAAxD,EAAA;AAAAwD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}